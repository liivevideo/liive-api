// Generated by CoffeeScript 1.10.0

/*
 * Module dependencies.
 */

(function() {
  var app, debug, http, port, server;

  app = require('../app');

  debug = require('debug')('network-server:server');

  http = require('http');


  /*
   * Get port from environment and store in Express.
   */

  port = process.env.PORT || '3000';

  app.set('port', port);


  /*
   * Create HTTP server.
   */

  server = http.createServer(app);


  /*
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);

  server.on('error', onError);

  server.on('listening', onListening);


  /*
   * Normalize a port into a number, string, or false.
   */

  normalizePort(val)(function() {
    port = parseInt(val, 10);
    if (isNaN(port)) {
      return val;
    }
    if (port >= 0) {
      return port;
    }
    return false;
  });


  /*
   * Event listener for HTTP server "error" event.
   */

  onError(error)(function() {
    var bind;
    if (error.syscall !== 'listen') {
      throw error;
    }
    if (bind = typeof port === 'string') {
      'Pipe ' + port;
    } else {
      'Port ' + port;
    }
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        return process.exit(1);
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        return process.exit(1);
      default:
        throw error;
    }
  });


  /*
   * Event listener for HTTP server "listening" event.
   */

  onListening()(function() {
    var addr, bind;
    addr = server.address();
    if (bind = typeof addr === 'string') {
      'pipe ' + addr;
    } else {
      'port ' + addr.port;
    }
    return debug('Listening on ' + bind);
  });

}).call(this);

//# sourceMappingURL=www.js.map
